================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2025-06-10T14:24:29.811Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
app_web.py
app.py
data/transactions_sample.csv
LICENSE
notes.txt
outputs/bi_output.csv
README.md
requirements.txt
scripts/clean_and_categorize.py
scripts/database_save.py
scripts/email_report.py
scripts/export_excel.py
scripts/flask_ui.py
scripts/generate_charts.py
scripts/generate_pdf.py
scripts/load_data.py
scripts/powerbi_export.py
scripts/quickbooks_api.py
scripts/smart_categorizer.py
scripts/stripe_integration.py
scripts/train_model.py
templates/download.html
templates/index.html
uploads/transactions_sample.csv

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# .gitignore
.env
scripts/.env

================
File: app_web.py
================
from flask import Flask, request, render_template, send_from_directory, redirect, url_for
import os
from scripts.load_data import load_transaction_data
from scripts.smart_categorizer import ml_categorize
from scripts.export_excel import export_to_excel
from scripts.generate_pdf import generate_pdf_report
from scripts.generate_charts import generate_category_charts
from scripts.stripe_integration import fetch_stripe_transactions

app = Flask(__name__)
UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/process', methods=['POST'])
def process():
    file = request.files['file']
    if not file:
        return "No file uploaded", 400

    filepath = os.path.join(UPLOAD_FOLDER, file.filename)
    file.save(filepath)

    df = load_transaction_data(filepath)
    categorized_df = ml_categorize(df)
    summary = categorized_df.groupby("Category")["Amount"].sum().reset_index()
    export_to_excel(categorized_df, summary)
    generate_pdf_report(summary)
    generate_category_charts(categorized_df)
    return redirect(url_for('download'))

@app.route('/stripe')
def stripe_route():
    df = fetch_stripe_transactions(limit=5)
    categorized_df = ml_categorize(df)
    summary = categorized_df.groupby("Category")["Amount"].sum().reset_index()
    export_to_excel(categorized_df, summary)
    generate_pdf_report(summary)
    generate_category_charts(categorized_df)
    return redirect(url_for('download'))

@app.route('/download')
def download():
    return render_template('download.html')

@app.route('/get/<filename>')
def get_file(filename):
    return send_from_directory('outputs', filename, as_attachment=True)

@app.route('/get/charts/<filename>')
def get_chart(filename):
    return send_from_directory('outputs/charts', filename)

if __name__ == "__main__":
    app.run(debug=True)

================
File: app.py
================
import argparse
from scripts.load_data import load_transaction_data
from scripts.clean_and_categorize import clean_and_categorize
from scripts.export_excel import export_to_excel
from scripts.generate_pdf import generate_pdf_report
from scripts.email_report import send_email_report
from scripts.database_save import save_to_database
from scripts.powerbi_export import prepare_bi_output

# Optional future features
# from scripts.quickbooks_api import sync_with_quickbooks
# from scripts.flask_ui import run_web_ui
# from scripts.smart_categorizer import ml_categorize

def main():
    parser = argparse.ArgumentParser(description="LedgerIQ: Accounting Automation Tool")
    parser.add_argument('--file', required=True, help='Path to the transactions CSV file')
    parser.add_argument('--email', help='Send report to this email')
    # parser.add_argument('--web', action='store_true', help='Run web interface')
    args = parser.parse_args()

    df = load_transaction_data(args.file)
    categorized_df, summary = clean_and_categorize(df)
    export_to_excel(categorized_df, summary)
    generate_pdf_report(summary)
    if args.email:
        send_email_report(args.email)
    save_to_database(categorized_df)
    prepare_bi_output(categorized_df)

    # Future hooks:
    # sync_with_quickbooks(categorized_df)
    # ml_categorize(categorized_df)
    # if args.web:
    #     run_web_ui()

if __name__ == "__main__":
    main()

================
File: data/transactions_sample.csv
================
Date,Description,Amount
2025-06-01,Amazon Purchase,-45.00
2025-06-02,PayPal Payment,1200.00
2025-06-03,Uber Ride,-22.75
2025-06-04,Starbucks Coffee,-5.50
2025-06-05,Freelance Payment,800.00
2025-06-06,Office Supplies,-120.00
2025-06-07,Internet Payment,-75.00

================
File: LICENSE
================
MIT License

Copyright (c) 2025 Robert 

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: notes.txt
================
Implementing the web UI (Flask)

Training an ML model for smart categorization

Creating sample dashboards in Power BI or Tableau

pip install -r requirements.txt

pip install fpdf==1.7.2

python app.py --file data/transactions_sample.csv

python app.py --file data/transactions_sample.csv --email lordbendtner57343@gmail.com


python scripts/train_model.py

python app_web.py

================
File: outputs/bi_output.csv
================
Date,Description,Amount,Category
2025-06-01,Amazon Purchase,-45.0,Shopping
2025-06-02,PayPal Payment,1200.0,Income
2025-06-03,Uber Ride,-22.75,Transport
2025-06-04,Starbucks Coffee,-5.5,Food
2025-06-05,Freelance Payment,800.0,Income
2025-06-06,Office Supplies,-120.0,Other
2025-06-07,Internet Payment,-75.0,Other

================
File: README.md
================
# üìä LedgerIQ: Automated Accounting Assistant

**LedgerIQ** is an intelligent, end-to-end accounting automation tool built in Python. It streamlines the workflow for freelancers, small business owners, and contractors by importing raw financial transaction data (CSV/Excel), categorizing expenses, generating insightful reports (Excel, PDF), emailing summaries, and exporting to dashboards like Power BI or Tableau.

---

## üîç Real-World Problem

Manual bookkeeping is tedious, error-prone, and time-consuming. Many professionals use spreadsheets to manage income and expenses, which becomes overwhelming during tax season or monthly reviews.

---

## ‚úÖ Solution

LedgerIQ automates the process by:

- üì• Importing financial data from CSV or Excel
- üìÇ Categorizing transactions with keyword-based rules
- üìä Creating monthly financial summaries
- üì§ Exporting Excel + PDF reports
- üìß Emailing reports to users
- üóÉÔ∏è Saving records in a local database
- üìà Providing output for BI tools like Power BI and Tableau

---

## üß∞ Tech Stack

| Layer        | Tool/Library                |
|--------------|-----------------------------|
| Core Logic   | Python, pandas              |
| Export       | openpyxl, matplotlib, fpdf  |
| Email        | smtplib, email.message      |
| Database     | SQLite, SQLAlchemy          |
| Interface    | argparse (CLI), tkinter (GUI optional) |
| Dashboard    | Power BI / Tableau          |
| Future       | Flask, QuickBooks API, scikit-learn |

---

## üìÅ Features

- ‚úÖ Read and clean CSV/Excel transactions
- ‚úÖ Auto-categorize expenses and income
- ‚úÖ Group by category, vendor, or month
- ‚úÖ Generate Excel spreadsheets with charts
- ‚úÖ Generate PDF summary reports
- ‚úÖ Email reports to specified users
- ‚úÖ Store processed data in SQLite database
- ‚úÖ BI-ready export for dashboards

---

## üöÄ Getting Started

### üîß Prerequisites

```bash
pip install pandas openpyxl fpdf matplotlib sqlalchemy
```

### ‚ñ∂Ô∏è Run the Tool

```bash
python app.py --file data/transactions_sample.csv
```

---

## üì∏ Sample Output

- ‚úÖ `monthly_report.xlsx` (Totals per category)
- ‚úÖ `monthly_report.pdf` (Pie chart + summary)
- ‚úÖ `accounting_data.sqlite` (Stores all records)

---

## üìà Power BI / Tableau Integration

All Excel outputs are dashboard-ready. Import into Power BI or Tableau to create live graphs of:

- Category-wise monthly expenses
- Vendor spending trends
- Net income flow by period

---

## ü§ñ Future Add-ons

- üîå **QuickBooks/Stripe API Integration** ‚Äî auto-sync real-time transactions
- üåê **Flask/FastAPI Web UI** ‚Äî manage financials from a user-friendly dashboard
- üß† **ML-based Smart Categorization** ‚Äî train model on past transactions to predict categories

---

## üìÑ License

MIT License

---

## üß† Author

Built by a Computer Science grad bridging the gap between **Finance and Automation**.  
This project demonstrates strong Python skills, real-world problem solving, and tech-business synergy.

![alt text](image.png)

![alt text](image-1.png)

================
File: requirements.txt
================
pandas
fpdf
matplotlib
sqlalchemy
scikit-learn
matplotlib
seaborn
stripe
python-dotenv

================
File: scripts/clean_and_categorize.py
================
def clean_and_categorize(df):
    rules = {
        'amazon': 'Shopping',
        'uber': 'Transport',
        'starbucks': 'Food',
        'paypal': 'Income',
        'freelance': 'Income'
    }
    df['Category'] = df['Description'].str.lower().apply(
        lambda desc: next((cat for key, cat in rules.items() if key in desc), 'Other')
    )
    summary = df.groupby('Category')['Amount'].sum().reset_index()
    return df, summary

================
File: scripts/database_save.py
================
import sqlite3
import os

def save_to_database(df):
    conn = sqlite3.connect(os.path.join("database", "accounting_data.sqlite"))
    df.to_sql("transactions", conn, if_exists="append", index=False)
    conn.close()

================
File: scripts/email_report.py
================
import smtplib
from email.message import EmailMessage
import os

def send_email_report(recipient_email):
    msg = EmailMessage()
    msg['Subject'] = 'Your Monthly Financial Report'
    msg['From'] = 'your_email@example.com'
    msg['To'] = recipient_email
    msg.set_content('Attached is your monthly report.')

    with open('outputs/monthly_report.pdf', 'rb') as f:
        msg.add_attachment(f.read(), maintype='application', subtype='pdf', filename='monthly_report.pdf')

    with smtplib.SMTP('smtp.gmail.com', 587) as smtp:
        smtp.starttls()
        smtp.login('your_email@example.com', 'your_password')
        smtp.send_message(msg)

================
File: scripts/export_excel.py
================
import pandas as pd
import os

def export_to_excel(df, summary):
    output_path = os.path.join('outputs', 'monthly_report.xlsx')
    with pd.ExcelWriter(output_path) as writer:
        df.to_excel(writer, sheet_name='Transactions', index=False)
        summary.to_excel(writer, sheet_name='Summary', index=False)

================
File: scripts/flask_ui.py
================
def run_web_ui():
    print("Starting Flask web UI (future feature)...")

================
File: scripts/generate_charts.py
================
import os
import matplotlib.pyplot as plt
import seaborn as sns

def generate_category_charts(df):
    output_dir = 'outputs/charts'
    os.makedirs(output_dir, exist_ok=True)

    summary = df.groupby('Category')['Amount'].sum().reset_index()

    # Bar Chart (works with positive and negative)
    plt.figure(figsize=(8, 6))
    sns.barplot(x='Amount', y='Category', data=summary)
    plt.title('Total by Category')
    plt.tight_layout()
    plt.savefig(os.path.join(output_dir, 'bar_chart.png'))
    plt.close()

    # Pie chart only for expenses (Amount < 0)
    expense_data = summary[summary['Amount'] < 0].copy()
    if not expense_data.empty:
        plt.figure(figsize=(6, 6))
        plt.pie(
            expense_data['Amount'].abs(),  # Convert negatives to positives for the pie
            labels=expense_data['Category'],
            autopct='%1.1f%%',
            startangle=140
        )
        plt.title('Expense Distribution')
        plt.tight_layout()
        plt.savefig(os.path.join(output_dir, 'pie_chart.png'))
        plt.close()

================
File: scripts/generate_pdf.py
================
from fpdf import FPDF
import os

def generate_pdf_report(summary):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="Monthly Summary Report", ln=True, align='C')
    pdf.ln(10)
    for _, row in summary.iterrows():
        pdf.cell(200, 10, txt=f"{row['Category']}: ${row['Amount']:.2f}", ln=True)
    pdf.output(os.path.join("outputs", "monthly_report.pdf"))

================
File: scripts/load_data.py
================
import pandas as pd

def load_transaction_data(filepath):
    df = pd.read_csv(filepath)
    df['Date'] = pd.to_datetime(df['Date'])
    return df

================
File: scripts/powerbi_export.py
================
import os

def prepare_bi_output(df):
    df.to_csv(os.path.join("outputs", "bi_output.csv"), index=False)

================
File: scripts/quickbooks_api.py
================
def sync_with_quickbooks(df):
    print("Syncing with QuickBooks (future feature)...")

================
File: scripts/smart_categorizer.py
================
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
import joblib
import os
#MACHINE LEARNING CODE
MODEL_PATH = os.path.join("scripts", "category_model.pkl")
VECTORIZER_PATH = os.path.join("scripts", "vectorizer.pkl")

def train_model(training_df):
    vectorizer = TfidfVectorizer()
    X = vectorizer.fit_transform(training_df['Description'])
    y = training_df['Category']

    model = MultinomialNB()
    model.fit(X, y)

    joblib.dump(model, MODEL_PATH)
    joblib.dump(vectorizer, VECTORIZER_PATH)

def ml_categorize(df):
    if not os.path.exists(MODEL_PATH) or not os.path.exists(VECTORIZER_PATH):
        print("No trained model found. Please train it first.")
        return df

    model = joblib.load(MODEL_PATH)
    vectorizer = joblib.load(VECTORIZER_PATH)

    X_new = vectorizer.transform(df['Description'])
    df['Category'] = model.predict(X_new)

    return df

================
File: scripts/stripe_integration.py
================
# scripts/stripe_integration.py

import stripe
import pandas as pd
import os
from datetime import datetime
from dotenv import load_dotenv

def fetch_stripe_transactions(limit=10):
    load_dotenv()
    stripe.api_key = os.getenv("STRIPE_SECRET_KEY")

    charges = stripe.Charge.list(limit=limit)
    data = []

    for charge in charges.auto_paging_iter():
        description = charge.description or "Stripe Charge"
        amount = charge.amount / 100  # Stripe uses cents
        created = datetime.fromtimestamp(charge.created).strftime('%Y-%m-%d')
        data.append({
            "Date": created,
            "Description": description,
            "Amount": amount
        })

    df = pd.DataFrame(data)
    output_path = os.path.join("data", "stripe_transactions.csv")
    df.to_csv(output_path, index=False)
    print(f"Stripe data saved to {output_path}")
    return df

================
File: scripts/train_model.py
================
import pandas as pd
from smart_categorizer import train_model

train_data = pd.DataFrame({
    "Description": [
        "Uber Ride", "Amazon Purchase", "Starbucks Coffee",
        "PayPal Payment", "Freelance Client Work"
    ],
    "Category": ["Transport", "Shopping", "Food", "Income", "Income"]
})

train_model(train_data)
print("‚úÖ ML model trained and saved!")

================
File: templates/download.html
================
<!DOCTYPE html>
<html>
<head>
    <title>LedgerIQ - Reports Ready</title>
</head>
<body>
    <h2>Your Reports Are Ready</h2>
    <ul>
        <li><a href="/get/monthly_report.pdf" download>Download PDF Report</a></li>
        <li><a href="/get/monthly_report.xlsx" download>Download Excel Report</a></li>
        <li><a href="/get/charts/bar_chart.png" target="_blank">View Bar Chart</a></li>
        <li><a href="/get/charts/pie_chart.png" target="_blank">View Pie Chart</a></li>
    </ul>
</body>
</html>

================
File: templates/index.html
================
<!DOCTYPE html>
<html>
<head>
    <title>LedgerIQ - Upload Transactions</title>
</head>
<body>
    <h2>Upload Your Transactions CSV</h2>
    <form action="/process" method="post" enctype="multipart/form-data">
        <input type="file" name="file" required>
        <br><br>
        <input type="submit" value="Generate Reports">
    </form>

    <h3>Or Fetch from Stripe</h3>
    <form action="/stripe" method="get">
        <input type="submit" value="Fetch from Stripe">
    </form>
</body>
</html>

================
File: uploads/transactions_sample.csv
================
Date,Description,Amount
2025-06-01,Amazon Purchase,-45.00
2025-06-02,PayPal Payment,1200.00
2025-06-03,Uber Ride,-22.75
2025-06-04,Starbucks Coffee,-5.50
2025-06-05,Freelance Payment,800.00
2025-06-06,Office Supplies,-120.00
2025-06-07,Internet Payment,-75.00
